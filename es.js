self.testCurvedPoly=function(n){"use strict";const t=Math.PI;function e(n,t){const[e,i]=n,[o,s]=t,r=i*Math.cos(e),d=s*Math.cos(o);return[i*Math.sin(e)+s*Math.sin(o),r+d]}return n.roundedPolygonBySideLength=function({sideLength:n,sideCount:i=3,borderRadius:o=0,cx:s=0,cy:r=0}){const{circumcircleRadius:d,angleIntendedBySide:u}=function({sideLength:n,sideCount:e}){const i=2*t/e;return{circumcircleRadius:n/(2*Math.sin(i/2)),angleIntendedBySide:i}}({sideLength:n,sideCount:i}),a=function({sideCount:n,radiusOfInnerPolygon:t,borderRadius:i,alpha:o,cx:s=0,cy:r=0}){const d=[];for(let s=0;s<n;s++){const n=e([s*o+o/2,t],[s*o,i]),r=e([s*o+o/2,t],[(s+1)*o,i]);d.push(n,r)}return d.map((([n,t])=>[n+s,t+r]))}({sideCount:i,radiusOfInnerPolygon:d-o/Math.cos(u/2),borderRadius:o,alpha:u,cx:s,cy:r}),c=function({allPoints:n,borderRadius:t,alpha:e}){return n.length?`M ${n[0].join(" ")}\n    ${n.slice(1).map(((n,i)=>i%2==0?`A ${t} ${t} ${e} 0 0 ${n.join(" ")}`:`L ${n.join(" ")}`)).join(" ")}\n    z\n    `:""}({allPoints:a,borderRadius:o,alpha:u});return c},n}({});
